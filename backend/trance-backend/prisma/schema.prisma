// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum RequestType {
  FRIEND
  CHALLENGE
  MESSAGE
  UNFRIEND
  BLOCKED
  UNBLOCKED
}

enum Status {
  MUTED
  FRIEND
  BLOCKED
  PENDING
}

enum AchievementStatus {
  DONE
  NOTDONE
}

model User {
  id            String     @id @default(uuid())
  intraId       Int        @unique
  password      String
  profilePic    String
  BackgroundPic String
  wallet        Int
  level         Int
  Rank          Int
  nickname      String     @unique
  status        UserStatus
  isEnabled     Boolean    @default(false)
  Secret        String?
  otpauth_url   String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt()
  setPass       Boolean    @default(false)
  Wins          Int        @default(0)
  Losses        Int        @default(0)
  FirstLogin    Boolean    @default(true)

  BlockedBy    String[]
  usersBlocked String[]
  userRequests Request[]
  channels     Channel[]
  Message      Message[]
  Match        Match[]
  Chat         Chat[]
  users        FriendStatus[]
  achievements Achievement[]
}

model Request {
  id                   String      @id @default(uuid())
  user                 User        @relation(fields: [userId], references: [id])
  userId               String
  senderId             String
  typeOfRequest        RequestType
  descriptionOfRequest String
  emitted              Boolean     @default(false)
  responded            Boolean     @default(false)
}

model Achievement {
  id          String            @id @default(uuid())
  title       String
  description String
  status      AchievementStatus
  userScore   Int               @default(0)
  totalScore  Int
  User        User?             @relation(fields: [userId], references: [id])
  userId      String
}

model FriendStatus {
  id       String @id @default(uuid())
  user     User   @relation(fields: [userId], references: [id])
  userId   String
  status   Status
  friendId String
}

model Channel {
  id       String    @id @default(uuid())
  type     String
  users    User[]
  messages Message[]
  // Define other fields for the channel as needed
}

model Message {
  id        String   @id @default(uuid())
  content   String
  sender    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?
  userId    String
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    String?
}

// Define an Achievement model (you can further customize this)

// Define a Match model
model Match {
  id      String @id @default(uuid())
  title   String
  wins    Int
  losses  Int
  score   Int
  against User   @relation(fields: [userId], references: [id])
  userId  String
}

// Define a Chat model
model Chat {
  id       String    @id @default(uuid())
  toUser   User      @relation(fields: [userId], references: [id])
  messages Message[]
  userId   String
}
