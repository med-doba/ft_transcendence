// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
  IN_GAME
}

enum Status {
  MUTED
  FRIEND
  BLOCKED
  PENDING
}

enum AchievementStatus {
  DONE
  NOTDONE
}

enum Membership {
  BLOCKED
  MUTED
  KICK
  BAN
  ACTIVE
}

enum  Role {
  OWNER
  ADMIN
  MEMBER
}

model User {
  id          Int        @id @default(autoincrement())
  intraId     String?     @unique
  email       String
  login       String     @unique
  password    String?
  firstName   String
  lastName    String
  profilePic  String
  wallet      Int
  level       Int
  grade       String
  token       String
  nickname    String? 
  status      UserStatus
  isEnabled   Boolean    @default(false)
  Secret      String?
  otpauth_url String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt()

  adminIn     Channel[] @relation("Admins")

  channels     Channel[]
  Message      Message[]
  Match        Match[]
  Chat         Chat[]
  users        FriendStatus[]
  achievements Achievement[]
}

model FriendStatus {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id])
  status Status
  userId Int
}

model Channel {
  id          String    @id @default(uuid())
  name        String    @unique
  owner       String
  type        String
  password    String?
  users       User[]
  admins      User[]    @relation("Admins")
  blacklist   Blacklist[]
  messages    Message[]
  updatedAt   DateTime  @updatedAt   @default(now())
}

model Blacklist {
  id          String  @id @default(uuid())   
  nickname    String  @unique
  role        Role
  status      Membership
  expiredAt   DateTime
  channelName String
  channel     Channel @relation(fields: [channelName], references: [name])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  sender    User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?
  userId    Int
  Chat      Chat?    @relation(fields: [chatId], references: [id])
  chatId    Int?
}

// Define an Achievement model (you can further customize this)
model Achievement {
  id          Int               @id @default(autoincrement())
  title       String
  description String
  status      AchievementStatus
  score       Int
  User        User?             @relation(fields: [userId], references: [id])
  userId      Int?
}

// Define a Match model
model Match {
  id      Int  @id @default(autoincrement())
  wins    Int
  losses  Int
  score   Int
  against User @relation(fields: [userId], references: [id])
  userId  Int
}

// Define a Chat model
model Chat {
  id       Int       @id @default(autoincrement())
  toUser   User      @relation(fields: [userId], references: [id])
  messages Message[]
  userId   Int
}
